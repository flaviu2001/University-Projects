

Inheritance

class A extends Object{

int fa;

int mA(int o, int b) {...}

}



                                  Object
                                    /\ \
                                   A    Book
                                   |
                                   B
                                   |
                                   C
                                   


class B extends A{

int fb;

int mA(int o, int b){...}
int mB(float z) {...}

}

class C extends B {..int mA(int o, int b){...}..int fc;.}

---
A objA = new A();
B objB = new B();
C objC = new C();


objA = objB; // it is allowed 
//objC = objA;  //it is not allowed

if (...)  objA = objC; //it is ok
else if (...) objA = new A();

objA.mA(20,23);


====================

class App{

   static int meth(A obj) {...}
   static int meth1(C obj) {..obj.fc.}

}

App.meth(objA); //correct
App.meth(objC); //correct

App.meth1(objA); // NOT correct
App.meth1(objC); //correct
App.meth1(objB); NOT correct 



===========================

java 
  lang
    ....class



myproject 
 -  model
      EntityA.java
      EntityB.java
 - view
       MyAppp.java                              import myproject.model.*; or myproject.model.EntityA  
 - controller
       MyController.java
 - Repository
       Myrepository.java


==============================


interface MyInterface {
   int m1(A obj);
   void m2(int x, A obj);
}


class Book implements MyInterface{ ...}

class A extends Object implements MyInteface{

int fa;

int mA(int o, int b) {...}

 int m1(A obj){...}
   void m2(int x, A obj) {...}

}

MyInterface a;



Book bb= new Book();
a=bb;
a.m1(objA);



















abstract classes

abstract class MyAbstract {
   abstract int m1(A obj);
   abstract void m2(int x, A obj);
}

class A extends MyAbstract{...}
class Book extends MyAbstract{...}











===============
1st solution

class Entity { abstract int getW();...}
class Book extends Entity{ int getW() {...} ...}
class Cake extends Entity{ int getW() {...}...}
class Apple extends Entity{int getW() {...}...}





Entity [] box;
box[i]= new Book(..);/new Apple (...)
box[i].getW();


















----
2nd solution
interface Entity { int getW();...}
class Book implements Entity{ int getW() {...} ...}
class Cake implements Entity{ int getW() {...}...}
class Apple implements Entity{int getW() {...}...}


Entity [] box;
box[i]= new Book(..);/new Apple (...)
box[i].getW();


====================

class Controller{
MyRepository  rep;

Controller( MyRepository rep) {....}

}
|
|
\/
Repository
---------

interface MyRepository {
.....
}











  






