Language Specification:

 1 .Language Definition:

  1.1 Alphabet:

  1.1.a. Upper (A-Z) and lower case letters (a-z) of the English alphabet

      b. Underline character '_';

      c. Decimal digits (0-9);

  Lexic:

      a.Special symbols, representing:

- operators + - * / := < <= = >=

- separators [ ] { }  : ; space

- reserved words:

    array  char  const do else  if int  of program read 

then var while write

      b.identifiers

  -a sequence of letters and  digits, such that the first character is a letter; the rule is:

    identifier ::= letter | letter{letter}{digit}
    
    letter ::= "A" | "B" | . ..| "Z"

    digit ::= "0" | "1" |...| "9"

      c.constants

1.integer - rule:
      
      noconst::=+non_zero_number|-non_zero_number|non_zero_number|"0"
      non_zero_digit::="1"|"2"|....|"9"
      non_zero_number::=non_zero_digit{digit}
      

// EBNF
     noconst::=[(+|-)] non_zero_number|"0"
     non_zero_digit::="1"|"2"|....|"9"
     non_zero_number::=non_zero_digit{no}
     no::=digit{no}


2.character

    character::='letter'|'digit'

3.string

      constchar::="string"

      string::=character{string}

      character:=letter|digit

 2.2 Syntax:

The words - predefined tokens are specified between " and ":

a) Sintactical rules:

    program ::= "VAR" decllist ";" cmpdstmt "."

   decllist ::= declaration | declaration ";" decllist

declaration ::= LIDENTIFIER ":" type
LIDENTIFIER::= id | id ","  LIDENTIFIER; 

      type1 ::= "BOOLEAN" | "CHAR" | "INTEGER" | "REAL"

  arraydecl ::= "ARRAY" "[" nr "]" "OF" type1

      type  ::= type1|arraydecl

   cmpdstmt ::= "BEGIN" stmtlist "END"

   stmtlist ::= stmt | stmt ";" stmtlist

       stmt ::= simplstmt | structstmt

  simplstmt ::= assignstmt | iostmt

 assignstmt ::= IDENTIFIER ":=" expression

 expression ::= expression "+" term | term

       term ::= term "*" factor | factor

     factor ::= "(" expression ")" | IDENTIFIER

     iostmt ::= "READ"  "(" IDENTIFIER ")" | "WRITE" "(" IDENTIFIER ")"

 structstmt ::= cmpdstmt | ifstmt | whilestmt

     ifstmt ::= "IF" condition "THEN" stmt |"IF" condition "THEN" stmt "ELSE" stmt

  whilestmt ::= "WHILE" condition "DO" stmt

  condition ::= expression RELATION expression

   RELATION ::= "<" | "<=" | "=" | "<>" | ">=" | ">"


Tip atom     |Cod
-----------------
identificator|	0
------------------
constanta	 |  1
------------------
program	     |  2
------------------
array        |	3
------------------
of	         |  4
------------------
var	         |  5
------------------
integer	     |  6 
------------------
real         |	7
------------------
boolean	     |  8
------------------
begin        |	9
------------------
end	         | 10
------------------
read	     | 11
------------------
write        | 12
------------------
for	         | 13
------------------
to	         | 14
------------------
do	         | 15
------------------
if	         | 16
------------------
then	     | 17
------------------
else	     | 18
------------------
and	         | 19
------------------
or	         | 20
------------------
not	         | 21
------------------
:            | 22
------------------
;	         | 23
------------------
,	         | 24
------------------
.	         | 25
------------------
+	         | 26
------------------
*	         | 27
------------------
(	         | 28
------------------
)	         | 29
------------------
[	         | 30
------------------
]	         | 31
------------------
-	         | 32
------------------
<	         | 33
------------------
>	         | 34
------------------
=	         | 35
------------------
:=	         | 36
------------------




VAR 
  X, Y, Z:INTEGER; 
  OK:BOOLEAN;
BEGIN
  READ(X);
  READ(Y);
  Z:=X+Y;
  OK:=TRUE;
  IF OK=TRUE THEN BEGIN
              
              WRITE(Z);
              WRITE(Y)
          END
   ELSE WRITE(X)
END.
  
VAR 










