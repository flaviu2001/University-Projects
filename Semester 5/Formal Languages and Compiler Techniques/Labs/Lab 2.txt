1. Example of my own mini language

var a;
var b, c;

a = "this is a string";
b = 2;
c = a + " as well"; // a is copied by value, not by reference
arr<3> d;
d[0] = a;
set_nth(d, 0, a);
set_nth(d, 1, get_nth(d, 0));

print(a);

if (b == 2) {
	print(b);
} else {
	print(c);
};

while (b == 2) {
	b *= 2;
};

var x = readInt();
var y = readString();

2. Alphabet

a-z
A-Z
0-9

3. Lexic

operators: +, -, *, /, ==, <, <=, >, >=, =
separators: {}, (), ;, space, newline, "
reserved words: var, if, print, readInt, readString, else, while, set_nth, get_nth

identifier ::= letter | letter{letter|digit}
letter ::= "A"|"B"|..|"Z"|"a"|"b"..|"z"
digit ::= "0"|"1"|..|"9"

int_constant ::= ("+"|"-")?non_zero_digit{digit}|"0"
non_zero_digit ::= "1"|"2"|..|"9"

string_constant ::= \"{letter|digit}\"  // here \" denotes the quote being used as an actual character and not the literal '{letter|digit}' string.

4. Syntax

program ::= {statement}
statement ::= var_statement|arr_statement|assign_statement|if_statement|while_statement|return_statement|function_call_statement ";"
var_statement ::= "var" identifier_list ";"
arr_statement ::= "arr" "<" positive_number ">" pure_identifier_list ";"
pure_identifier_list ::= identifier {"," identifier}
identifier_list ::= identifier ("=" expression)? {"," identifier ("=" expression)?}
expression ::= int_expression | string_expression | function_call_expression
int_expression ::= int_constant | identifier | 
                   int_expression ("+"|"-"|"*"|"/") int_expression |
                   "(" int_expression ("+"|"-"|"*"|"/") int_expression ")"
string_expression ::= string_constant | identifier |
                      string_expression + string_expression
function_call_expression ::= identifier "(" expression_list? ")"
expression_list ::= expression{"," expression}
assign_statement ::= identifier "=" expression
if_statement ::= "if" "(" condition ")" "{" {statement} "}" ("else" "{" {statement} "}")?
condition ::= expression relational_operator expression
relational_operator ::= "=="|"<"|"<="|">"|">="
while_statement ::= "while" "(" condition ")" "{" {statement} "}"
return_statement ::= "return" expression
function_call_statement ::= function_call_expression ";"