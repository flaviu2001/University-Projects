I used Regex for matching the strings for constants and identifiers.

String constant Regex: ^\"([a-zA-z0-9_ ]*)\"
This regex checks if the beginning of the string matches with \" (which is the escaped quotes, I need to escape quotes as in kotlin you write Regex under a string like "^\"([a-zA-z0-9_ ]*)\"", and by using \ I ensure the string isn't prematurely terminated). Afterwards it starts a group that contains as many lowercase and uppercase letters, digits, underscores and spaces as possible. This group is then captured in code to directly operate with it.

Int constant Regex: ^([+-]?[1-9][0-9]*|0)
This regex checks if the beginning of the string matches with a string that possibly contains a + or a -, surely contains a digit from 1 to 9 and as many digits (possibly none) from 0 to 9. Either all that or a simple 0.

Identifier Regex: ^([a-zA-Z_][a-zA-Z0-9_]*)
This regex checks if the beginning of the string matches with a string that surely contains a character that is either a lowercase/uppercase letter or an underscore, then as many, possibly no characters that are either lowercase/uppercase letters, or digits or underscores. All this is again captured in a group to use further.

My PIF is built by translating the token into a code associated to it, or if it is an identifier its code is going to be -1, int constant has code -2, string constant has code -3. This is done to distinguish among them as I use separate hash tables for their symbol tables. The value of the pair is another pair that contains its position in the hash table that represents which bucket and which position inside that bucket represents your token.

I parsed the program by first reading the entire file into a string and then simply processing character by character this string. I keep a variable that records the index that I am currently at, then I check if the string starting at that index is a string constant, then an int constant, then a token from the list of tokens and then an identifier, and whichever is first identified as that is what is going to be considered. I use regex to do the actual checking and skip the index by how many characters the token occupies.